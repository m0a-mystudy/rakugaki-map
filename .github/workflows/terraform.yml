name: Terraform CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev or prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

# Required for Workload Identity Federation
permissions:
  contents: read
  id-token: write
  issues: write
  pull-requests: write

env:
  TF_VAR_project_id_dev: ${{ vars.FIREBASE_PROJECT_ID_DEV }}
  TF_VAR_project_id_prod: ${{ vars.FIREBASE_PROJECT_ID_PROD }}

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    strategy:
      matrix:
        environment: [dev, prod]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # Authenticate to Google Cloud using Workload Identity
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account: ${{ vars.WIF_SERVICE_ACCOUNT }}

      - name: Set environment variables
        run: |
          if [ "${{ matrix.environment }}" = "prod" ]; then
            echo "PROJECT_ID=${{ vars.FIREBASE_PROJECT_ID_PROD }}" >> $GITHUB_ENV
          else
            echo "PROJECT_ID=${{ vars.FIREBASE_PROJECT_ID_DEV }}" >> $GITHUB_ENV
          fi

      - name: Terraform Init
        working-directory: terraform/environments/${{ matrix.environment }}
        run: |
          if [ "${{ matrix.environment }}" = "dev" ]; then
            terraform init -backend-config="bucket=rakugakimap-dev-terraform-state"
          else
            terraform init -backend-config="bucket=rakugakimap-prod-terraform-state"
          fi

      - name: Terraform Validate
        working-directory: terraform/environments/${{ matrix.environment }}
        run: terraform validate

      - name: Setup Firebase CLI
        run: |
          npm install -g firebase-tools

      - name: Get Firebase Configuration
        id: firebase_config
        run: |
          # Authenticate Firebase CLI with CI token
          echo "${{ secrets.FIREBASE_CI_TOKEN }}" | firebase login:ci --token-stdin

          # Get Firebase configuration
          source <(./scripts/get-firebase-config.sh ${{ env.PROJECT_ID }})

          # Set as environment variables for next steps
          echo "FIREBASE_API_KEY=$TF_VAR_firebase_api_key" >> $GITHUB_ENV
          echo "FIREBASE_AUTH_DOMAIN=$TF_VAR_firebase_auth_domain" >> $GITHUB_ENV
          echo "FIREBASE_STORAGE_BUCKET=$TF_VAR_firebase_storage_bucket" >> $GITHUB_ENV
          echo "FIREBASE_MESSAGING_SENDER_ID=$TF_VAR_firebase_messaging_sender_id" >> $GITHUB_ENV
          echo "FIREBASE_APP_ID=$TF_VAR_firebase_app_id" >> $GITHUB_ENV

      - name: Terraform Plan
        working-directory: terraform/environments/${{ matrix.environment }}
        env:
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_firebase_api_key: ${{ env.FIREBASE_API_KEY }}
          TF_VAR_firebase_auth_domain: ${{ env.FIREBASE_AUTH_DOMAIN }}
          TF_VAR_firebase_storage_bucket: ${{ env.FIREBASE_STORAGE_BUCKET }}
          TF_VAR_firebase_messaging_sender_id: ${{ env.FIREBASE_MESSAGING_SENDER_ID }}
          TF_VAR_firebase_app_id: ${{ env.FIREBASE_APP_ID }}
          TF_VAR_firebase_ci_token: ${{ secrets.FIREBASE_CI_TOKEN }}
          TF_VAR_billing_account: ${{ secrets.BILLING_ACCOUNT_ID }}
        run: |
          terraform plan -out=tfplan

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: terraform/environments/${{ matrix.environment }}/tfplan
          retention-days: 5

      - name: Comment PR with plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read terraform plan output
            const { execSync } = require('child_process');
            const planOutput = execSync(
              `cd terraform/environments/${{ matrix.environment }} && terraform show -no-color tfplan`,
              { encoding: 'utf8', maxBuffer: 1024 * 1024 * 10 }
            );

            const environment = '${{ matrix.environment }}';
            const emoji = environment === 'prod' ? '🚀' : '🧪';

            const body = `${emoji} **Terraform Plan - ${environment.toUpperCase()}**

            <details>
            <summary>Show Plan Output</summary>

            \\\`\\\`\\\`terraform
            ${planOutput.slice(0, 50000)}${planOutput.length > 50000 ? '\\n\\n... (truncated)' : ''}
            \\\`\\\`\\\`

            </details>

            ---
            *Generated by Terraform CI/CD*`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.body.includes(`Terraform Plan - ${environment.toUpperCase()}`)
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment:
      name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # Authenticate to Google Cloud using Workload Identity
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account: ${{ vars.WIF_SERVICE_ACCOUNT }}

      - name: Set environment variables
        run: |
          if [ "${{ github.event.inputs.environment }}" = "prod" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENV="${{ github.event.inputs.environment || 'dev' }}"
            if [ "$ENV" = "prod" ]; then
              echo "PROJECT_ID=${{ vars.FIREBASE_PROJECT_ID_PROD }}" >> $GITHUB_ENV
              echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            else
              echo "PROJECT_ID=${{ vars.FIREBASE_PROJECT_ID_DEV }}" >> $GITHUB_ENV
              echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            fi
          fi

      - name: Terraform Init
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        run: |
          if [ "${{ env.ENVIRONMENT }}" = "dev" ]; then
            terraform init -backend-config="bucket=rakugakimap-dev-terraform-state"
          else
            terraform init -backend-config="bucket=rakugakimap-prod-terraform-state"
          fi

      - name: Setup Firebase CLI
        run: |
          npm install -g firebase-tools

      - name: Get Firebase Configuration
        id: firebase_config
        run: |
          # Authenticate Firebase CLI with CI token
          echo "${{ secrets.FIREBASE_CI_TOKEN }}" | firebase login:ci --token-stdin

          # Get Firebase configuration
          source <(./scripts/get-firebase-config.sh ${{ env.PROJECT_ID }})

          # Set as environment variables for next steps
          echo "FIREBASE_API_KEY=$TF_VAR_firebase_api_key" >> $GITHUB_ENV
          echo "FIREBASE_AUTH_DOMAIN=$TF_VAR_firebase_auth_domain" >> $GITHUB_ENV
          echo "FIREBASE_STORAGE_BUCKET=$TF_VAR_firebase_storage_bucket" >> $GITHUB_ENV
          echo "FIREBASE_MESSAGING_SENDER_ID=$TF_VAR_firebase_messaging_sender_id" >> $GITHUB_ENV
          echo "FIREBASE_APP_ID=$TF_VAR_firebase_app_id" >> $GITHUB_ENV

      - name: Terraform Plan
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        env:
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_firebase_api_key: ${{ env.FIREBASE_API_KEY }}
          TF_VAR_firebase_auth_domain: ${{ env.FIREBASE_AUTH_DOMAIN }}
          TF_VAR_firebase_storage_bucket: ${{ env.FIREBASE_STORAGE_BUCKET }}
          TF_VAR_firebase_messaging_sender_id: ${{ env.FIREBASE_MESSAGING_SENDER_ID }}
          TF_VAR_firebase_app_id: ${{ env.FIREBASE_APP_ID }}
          TF_VAR_firebase_ci_token: ${{ secrets.FIREBASE_CI_TOKEN }}
          TF_VAR_billing_account: ${{ secrets.BILLING_ACCOUNT_ID }}
        run: |
          terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        env:
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_firebase_api_key: ${{ env.FIREBASE_API_KEY }}
          TF_VAR_firebase_auth_domain: ${{ env.FIREBASE_AUTH_DOMAIN }}
          TF_VAR_firebase_storage_bucket: ${{ env.FIREBASE_STORAGE_BUCKET }}
          TF_VAR_firebase_messaging_sender_id: ${{ env.FIREBASE_MESSAGING_SENDER_ID }}
          TF_VAR_firebase_app_id: ${{ env.FIREBASE_APP_ID }}
          TF_VAR_firebase_ci_token: ${{ secrets.FIREBASE_CI_TOKEN }}
          TF_VAR_billing_account: ${{ secrets.BILLING_ACCOUNT_ID }}
        run: |
          terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: outputs
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        run: |
          # Only get outputs if they exist
          if terraform output workload_identity_provider 2>/dev/null; then
            echo "wif_provider=$(terraform output -raw workload_identity_provider)" >> $GITHUB_OUTPUT
            echo "service_account=$(terraform output -raw service_account_email)" >> $GITHUB_OUTPUT
          fi

          if terraform output project_id 2>/dev/null; then
            echo "project_id=$(terraform output -raw project_id)" >> $GITHUB_OUTPUT
          fi

      - name: Comment deployment result
        uses: actions/github-script@v7
        if: github.event_name == 'push'
        with:
          script: |
            const environment = '${{ env.ENVIRONMENT }}';
            const projectId = '${{ steps.outputs.outputs.project_id }}';
            const wifProvider = '${{ steps.outputs.outputs.wif_provider }}';
            const serviceAccount = '${{ steps.outputs.outputs.service_account }}';

            const emoji = environment === 'prod' ? '🚀' : '🧪';
            const envDisplay = environment === 'prod' ? 'Production' : 'Development';

            let body = \`\${emoji} **Terraform Apply Successful - \${envDisplay}**

            **Environment**: \${envDisplay}
            **Project ID**: \${projectId}
            **Commit**: \\\`\${context.sha.substr(0, 7)}\\\`

            **Infrastructure Status**: ✅ Updated\`;

            if (wifProvider && serviceAccount) {
              body += \`

              **Workload Identity Configuration**:
              - Provider: \\\`\${wifProvider}\\\`
              - Service Account: \\\`\${serviceAccount}\\\`

              ℹ️ Make sure to update GitHub repository variables with these values if they've changed.\`;
            }

            body += \`

            ---
            *Deployed via Terraform CI/CD*\`;

            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: body
            });

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment:
      name: destroy-${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # Authenticate to Google Cloud using Workload Identity
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account: ${{ vars.WIF_SERVICE_ACCOUNT }}

      - name: Set environment variables
        run: |
          if [ "${{ github.event.inputs.environment }}" = "prod" ]; then
            echo "PROJECT_ID=${{ vars.FIREBASE_PROJECT_ID_PROD }}" >> $GITHUB_ENV
          else
            echo "PROJECT_ID=${{ vars.FIREBASE_PROJECT_ID_DEV }}" >> $GITHUB_ENV
          fi
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV

      - name: Terraform Init
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        run: |
          if [ "${{ env.ENVIRONMENT }}" = "dev" ]; then
            terraform init -backend-config="bucket=rakugakimap-dev-terraform-state"
          else
            terraform init -backend-config="bucket=rakugakimap-prod-terraform-state"
          fi

      - name: Terraform Plan (Destroy)
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        env:
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_firebase_api_key: ${{ secrets.FIREBASE_API_KEY }}
          TF_VAR_firebase_auth_domain: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          TF_VAR_firebase_storage_bucket: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          TF_VAR_firebase_messaging_sender_id: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          TF_VAR_firebase_app_id: ${{ secrets.FIREBASE_APP_ID }}
          TF_VAR_firebase_ci_token: ${{ secrets.FIREBASE_CI_TOKEN }}
          TF_VAR_billing_account: ${{ secrets.BILLING_ACCOUNT_ID }}
        run: |
          terraform plan -destroy -out=destroy-plan

      - name: Terraform Destroy
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        run: |
          terraform apply -auto-approve destroy-plan
