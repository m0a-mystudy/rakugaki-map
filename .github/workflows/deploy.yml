name: Deploy to Firebase Hosting (Workload Identity)

on:
  push:
    branches:
      - main      # Development deployment
    tags:
      - 'v*'      # Production deployment (v1.0.0, v2.1.3, etc.)
  pull_request:
    branches:
      - main

# Required for Workload Identity Federation
permissions:
  contents: read
  id-token: write
  issues: write
  pull-requests: write

env:
  # These will be set by Terraform outputs
  WIF_PROVIDER: '' # Will be set in repository variables
  WIF_SERVICE_ACCOUNT: '' # Will be set in repository variables

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install security tools
        run: |
          pip install detect-secrets
          curl -sSfL https://raw.githubusercontent.com/gitleaks/gitleaks/master/scripts/install.sh | sh -s -- -b /usr/local/bin
        continue-on-error: true

      - name: Run security checks
        run: |
          npm run security:all
        continue-on-error: true

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "project_id=${{ vars.PROJECT_ID_PROD }}" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "project_id=${{ vars.FIREBASE_PROJECT_ID_DEV }}" >> $GITHUB_OUTPUT
          fi

      # Authenticate to Google Cloud using Workload Identity
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ steps.env.outputs.environment == 'prod' && vars.WIF_PROVIDER_PROD || vars.WIF_PROVIDER }}
          service_account: ${{ steps.env.outputs.environment == 'prod' && vars.WIF_SERVICE_ACCOUNT_PROD || vars.WIF_SERVICE_ACCOUNT }}

      # Get secrets from Secret Manager
      - name: Get secrets from Secret Manager
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@v2
        with:
          secrets: |- # pragma: allowlist secret
            firebase_api_key:${{ steps.env.outputs.project_id }}/firebase-api-key-${{ steps.env.outputs.environment }}
            firebase_auth_domain:${{ steps.env.outputs.project_id }}/firebase-auth-domain-${{ steps.env.outputs.environment }}
            firebase_storage_bucket:${{ steps.env.outputs.project_id }}/firebase-storage-bucket-${{ steps.env.outputs.environment }}
            firebase_messaging_sender_id:${{ steps.env.outputs.project_id }}/firebase-messaging-sender-id-${{ steps.env.outputs.environment }}
            firebase_app_id:${{ steps.env.outputs.project_id }}/firebase-app-id-${{ steps.env.outputs.environment }}
            google_maps_api_key:${{ steps.env.outputs.project_id }}/google-maps-api-key-${{ steps.env.outputs.environment }}
            firebase_token:${{ steps.env.outputs.project_id }}/firebase-ci-token-${{ steps.env.outputs.environment }}

      - name: Create environment file
        run: |
          echo "VITE_GOOGLE_MAPS_API_KEY=${{ steps.secrets.outputs.google_maps_api_key }}" > .env.local
          echo "VITE_FIREBASE_API_KEY=${{ steps.secrets.outputs.firebase_api_key }}" >> .env.local
          echo "VITE_FIREBASE_AUTH_DOMAIN=${{ steps.secrets.outputs.firebase_auth_domain }}" >> .env.local
          echo "VITE_FIREBASE_PROJECT_ID=${{ steps.env.outputs.project_id }}" >> .env.local
          echo "VITE_FIREBASE_STORAGE_BUCKET=${{ steps.secrets.outputs.firebase_storage_bucket }}" >> .env.local
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${{ steps.secrets.outputs.firebase_messaging_sender_id }}" >> .env.local
          echo "VITE_FIREBASE_APP_ID=${{ steps.secrets.outputs.firebase_app_id }}" >> .env.local
          echo "VITE_MAP_ID=${{ steps.env.outputs.environment == 'prod' && vars.MAP_ID_PROD || vars.MAP_ID_DEV }}" >> .env.local

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

  deploy:
    name: Deploy to Firebase Hosting
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "project_id=${{ vars.PROJECT_ID_PROD }}" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "project_id=${{ vars.FIREBASE_PROJECT_ID_DEV }}" >> $GITHUB_OUTPUT
          fi

      # Authenticate to Google Cloud using Workload Identity
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ steps.env.outputs.environment == 'prod' && vars.WIF_PROVIDER_PROD || vars.WIF_PROVIDER }}
          service_account: ${{ steps.env.outputs.environment == 'prod' && vars.WIF_SERVICE_ACCOUNT_PROD || vars.WIF_SERVICE_ACCOUNT }}
          create_credentials_file: true

      # Get Firebase token from Secret Manager
      - name: Get Firebase token
        id: firebase_token
        uses: google-github-actions/get-secretmanager-secrets@v2
        with:
          secrets: |- # pragma: allowlist secret
            token:${{ steps.env.outputs.project_id }}/firebase-ci-token-${{ steps.env.outputs.environment }}

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase Hosting
        run: |
          firebase deploy --only hosting --project ${{ steps.env.outputs.project_id }} --token ${{ steps.firebase_token.outputs.token }}

      - name: Output deployment summary
        if: github.event_name == 'push'
        run: |
          environment="${{ steps.env.outputs.environment }}"
          project_id="${{ steps.env.outputs.project_id }}"
          deployment_url="https://${project_id}.web.app"
          env_display=$([ "$environment" = "prod" ] && echo "Production" || echo "Development")
          emoji=$([ "$environment" = "prod" ] && echo "üöÄ" || echo "üß™")

          echo "::notice title=Deployment Successful::${emoji} ${env_display} deployment completed successfully!"
          echo "::notice title=Deployment URL::${deployment_url}"
          echo "::notice title=Environment::${env_display}"
          echo "::notice title=Deployed Commit::${GITHUB_SHA:0:7}"

  preview:
    name: Deploy Preview (PR)
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      # Authenticate to Google Cloud using Workload Identity
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account: ${{ vars.WIF_SERVICE_ACCOUNT }}
          create_credentials_file: true

      # Get Firebase token from Secret Manager (always use dev for previews)
      - name: Get Firebase token
        id: firebase_token
        uses: google-github-actions/get-secretmanager-secrets@v2
        with:
          secrets: |- # pragma: allowlist secret
            token:${{ vars.FIREBASE_PROJECT_ID_DEV }}/firebase-ci-token-dev

      - name: Deploy preview
        id: preview_deploy
        run: |
          # Deploy to preview channel
          PREVIEW_OUTPUT=$(firebase hosting:channel:deploy pr-${{ github.event.number }} --project ${{ vars.FIREBASE_PROJECT_ID_DEV }} --expires 7d --token ${{ steps.firebase_token.outputs.token }} 2>&1)

          # Extract preview URL
          PREVIEW_URL=$(echo "$PREVIEW_OUTPUT" | grep -o 'https://[^[:space:]]*--pr-[0-9]*-[^[:space:]]*.web.app' | head -1)
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ steps.preview_deploy.outputs.preview_url }}';

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.body.includes('üîç Preview deployment')
            );

            const body = `üîç **Preview deployment ready!**

            **Preview URL**: ${previewUrl}
            **Target Environment**: Development
            **Base Branch**: \`${{ github.base_ref }}\`

            Changes in this PR can be previewed at the URL above.
            Preview will be available for 7 days.

            Deployed commit: \`${context.sha.substr(0, 7)}\`

            ---
            *This deployment uses Workload Identity Federation for secure, keyless authentication.*`;

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
