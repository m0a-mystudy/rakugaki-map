name: Deploy to Firebase Hosting

on:
  push:
    branches:
      - main      # Development deployment
    tags:
      - 'v*'      # Production deployment (v1.0.0, v2.1.3, etc.)
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security checks
        run: |
          npm run security:all
        continue-on-error: true
        
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "project_id=${{ secrets.FIREBASE_PROJECT_ID_PROD }}" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "project_id=${{ secrets.FIREBASE_PROJECT_ID_DEV }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Create environment file (Development)
        if: steps.env.outputs.environment == 'dev'
        run: |
          echo "VITE_GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY_DEV }}" > .env.local
          echo "VITE_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY_DEV }}" >> .env.local
          echo "VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN_DEV }}" >> .env.local
          echo "VITE_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID_DEV }}" >> .env.local
          echo "VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET_DEV }}" >> .env.local
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID_DEV }}" >> .env.local
          echo "VITE_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID_DEV }}" >> .env.local
          
      - name: Create environment file (Production)
        if: steps.env.outputs.environment == 'prod'
        run: |
          echo "VITE_GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY_PROD }}" > .env.local
          echo "VITE_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY_PROD }}" >> .env.local
          echo "VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN_PROD }}" >> .env.local
          echo "VITE_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID_PROD }}" >> .env.local
          echo "VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET_PROD }}" >> .env.local
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID_PROD }}" >> .env.local
          echo "VITE_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID_PROD }}" >> .env.local
          
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

  deploy:
    name: Deploy to Firebase Hosting
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
          
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "project_id=${{ secrets.FIREBASE_PROJECT_ID_PROD }}" >> $GITHUB_OUTPUT
            echo "service_account_key=${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_PROD }}" >> $GITHUB_OUTPUT
            echo "firebase_token=${{ secrets.FIREBASE_TOKEN_PROD }}" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "project_id=${{ secrets.FIREBASE_PROJECT_ID_DEV }}" >> $GITHUB_OUTPUT
            echo "service_account_key=${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_DEV }}" >> $GITHUB_OUTPUT
            echo "firebase_token=${{ secrets.FIREBASE_TOKEN_DEV }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Setup Firebase CLI
        run: npm install -g firebase-tools
        
      - name: Deploy to Firebase Hosting
        run: |
          echo '${{ steps.env.outputs.service_account_key }}' > firebase-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS=firebase-service-account.json
          firebase deploy --only hosting --project ${{ steps.env.outputs.project_id }} --token ${{ steps.env.outputs.firebase_token }}
          rm firebase-service-account.json
        
      - name: Comment deployment URL
        uses: actions/github-script@v7
        if: github.event_name == 'push'
        with:
          script: |
            const environment = '${{ steps.env.outputs.environment }}';
            const projectId = '${{ steps.env.outputs.project_id }}';
            const deploymentUrl = `https://${projectId}.web.app`;
            const envDisplay = environment === 'prod' ? 'Production' : 'Development';
            const emoji = environment === 'prod' ? 'üöÄ' : 'üß™';
            
            // Create deployment comment
            const { data: comments } = await github.rest.repos.listCommentsForCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('Deployment successful') && comment.body.includes(envDisplay)
            );
            
            const body = `${emoji} **Deployment successful!**
            
**${envDisplay} URL**: ${deploymentUrl}

Deployed commit: \`${context.sha.substr(0, 7)}\`
Environment: ${envDisplay}
Branch: \`${context.ref.replace('refs/heads/', '')}\``;

            if (existingComment) {
              await github.rest.repos.updateCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: body
              });
            }

  preview:
    name: Deploy Preview (PR)
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
          
      - name: Setup Firebase CLI
        run: npm install -g firebase-tools
        
      - name: Determine environment
        id: env
        run: |
          # Always use dev for PR previews (main branch targets)
          echo "environment=dev" >> $GITHUB_OUTPUT
          echo "project_id=${{ secrets.FIREBASE_PROJECT_ID_DEV }}" >> $GITHUB_OUTPUT
          echo "service_account_key=${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_DEV }}" >> $GITHUB_OUTPUT
          echo "firebase_token=${{ secrets.FIREBASE_TOKEN_DEV }}" >> $GITHUB_OUTPUT
          
      - name: Deploy preview
        id: preview_deploy
        run: |
          echo '${{ steps.env.outputs.service_account_key }}' > firebase-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS=firebase-service-account.json
          
          # Deploy to preview channel
          PREVIEW_OUTPUT=$(firebase hosting:channel:deploy pr-${{ github.event.number }} --project ${{ steps.env.outputs.project_id }} --expires 7d --token ${{ steps.env.outputs.firebase_token }} 2>&1)
          
          # Extract preview URL
          PREVIEW_URL=$(echo "$PREVIEW_OUTPUT" | grep -o 'https://[^[:space:]]*--pr-[0-9]*-[^[:space:]]*.web.app' | head -1)
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          
          rm firebase-service-account.json
          
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ steps.preview_deploy.outputs.preview_url }}';
            const environment = '${{ steps.env.outputs.environment }}';
            const envDisplay = environment === 'prod' ? 'Production' : 'Development';
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('üîç Preview deployment')
            );
            
            const body = `üîç **Preview deployment ready!**

**Preview URL**: ${previewUrl}
**Target Environment**: ${envDisplay}
**Base Branch**: \`${{ github.base_ref }}\`

Changes in this PR can be previewed at the URL above.
Preview will be available for 7 days.

Deployed commit: \`${context.sha.substr(0, 7)}\``;

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }